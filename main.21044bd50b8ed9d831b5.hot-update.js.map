{"version":3,"file":"main.21044bd50b8ed9d831b5.hot-update.js","sources":["webpack:///./src/main/webapp/app/modules/account/password/password.reducer.ts","webpack:///./src/main/webapp/app/modules/account/settings/settings.reducer.ts","webpack:///./src/main/webapp/app/shared/reducers/application-profile.ts","webpack:///./src/main/webapp/app/shared/reducers/authentication.ts"],"sourcesContent":["import axios from 'axios';\nimport { translate } from 'react-jhipster';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { toast } from 'react-toastify';\nexport const ACTION_TYPES = {\n  UPDATE_PASSWORD: 'account/UPDATE_PASSWORD',\n  RESET: 'account/RESET',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  updateSuccess: false,\n  updateFailure: false,\n};\n\nexport type PasswordState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: PasswordState = initialState, action): PasswordState => {\n  if (action.type === SUCCESS(ACTION_TYPES.UPDATE_PASSWORD)) {\n    const success = action.payload.data.data.updateUser.user.length > 0 ? true : false;\n    if (success) {\n      toast.success(translate('password.messages.success'));\n      return {\n        ...initialState,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false,\n      };\n    } else {\n      toast.error(translate('password.messages.error'));\n      return {\n        ...initialState,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true,\n      };\n    }\n  }\n\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.UPDATE_PASSWORD):\n      return {\n        ...initialState,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.UPDATE_PASSWORD):\n      return {\n        ...initialState,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true,\n      };\n    case SUCCESS(ACTION_TYPES.UPDATE_PASSWORD):\n      return {\n        ...initialState,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false,\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nconst apiUrl = 'api/account';\nexport const savePassword = (currentPassword, newPassword) => (dispatch, getState) => {\n  const body = {\n    query: `mutation {\n      updateUser(input: {filter: {login: {eq: \"${\n        getState().authentication.account.login\n      }\"}, password: {eq: \"${currentPassword}\"}}, set: {password: \"${newPassword}\"}}) {\n        user {\n          login\n        }\n      }\n    }`,\n  };\n\n  const options = {\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Auth-Token':\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjJjYjJiYyIsImV4cCI6MTYyODkzODQ1MiwiaXNzIjoicy9hcGkifQ.g8bPCjN1PFb9pAPydPrrVKfPeMTWtqfeXpjGqmVs-2c',\n    },\n  };\n\n  dispatch({\n    type: ACTION_TYPES.UPDATE_PASSWORD,\n    payload: axios.post('graphql', body, options),\n    // meta: {\n    //   successMessage: translate('password.messages.success'),\n    //   errorMessage: translate('password.messages.error'),\n    // },\n  });\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET,\n});\n","import axios from 'axios';\nimport { translate, Storage } from 'react-jhipster';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { toast } from 'react-toastify';\n\nexport const ACTION_TYPES = {\n  UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n  RESET: 'account/RESET',\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  updateSuccess: false,\n  updateFailure: false,\n};\n\nexport type SettingsState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SettingsState = initialState, action): SettingsState => {\n  if (action.type === SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT)) {\n    const success = action.payload.data.data.updateUser.user.length > 0 ? true : false;\n    if (success) {\n      toast.success(translate('settings.messages.success'));\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false,\n      };\n    } else {\n      toast.error(translate('settings.messages.error.fail'));\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true,\n      };\n    }\n  }\n\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true,\n      };\n    case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false,\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nconst apiUrl = 'api/account';\n\nexport const saveAccountSettings: (account: any) => void = account => async dispatch => {\n  const body = {\n    query: `mutation {\n      updateUser(input: {filter: {login: {eq: \"${account.login}\"}}, set: {email: \"${account.email}\", firstName: \"${account.firstName}\", langKey: \"${account.langKey}\", lastName: \"${account.lastName}\"}}) {\n        user {\n          login\n          firstName\n          email\n          lastName\n          langKey\n        }\n      }\n    }`,\n  };\n\n  const options = {\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Auth-Token':\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjJjYjJiYyIsImV4cCI6MTYyODkzODQ1MiwiaXNzIjoicy9hcGkifQ.g8bPCjN1PFb9pAPydPrrVKfPeMTWtqfeXpjGqmVs-2c',\n    },\n  };\n\n  await dispatch({\n    type: ACTION_TYPES.UPDATE_ACCOUNT,\n    payload: axios.post('graphql', body, options),\n    // meta: {\n    //   successMessage: translate('settings.messages.success'),\n    // },\n  });\n\n  if (Storage.session.get(`locale`)) {\n    Storage.session.remove(`locale`);\n  }\n\n  await dispatch(getSession());\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET,\n});\n","import axios from 'axios';\n\nimport { SUCCESS } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  GET_PROFILE: 'applicationProfile/GET_PROFILE',\n};\n\nconst initialState = {\n  ribbonEnv: '',\n  inProduction: true,\n  isSwaggerEnabled: false,\n};\n\nexport type ApplicationProfileState = Readonly<typeof initialState>;\n\nexport default (state: ApplicationProfileState = initialState, action): ApplicationProfileState => {\n  switch (action.type) {\n    case SUCCESS(ACTION_TYPES.GET_PROFILE): {\n      const { data } = action.payload;\n      return {\n        ...state,\n        ribbonEnv: data['display-ribbon-on-profiles'],\n        inProduction: data.activeProfiles.includes('prod'),\n        isSwaggerEnabled: data.activeProfiles.includes('swagger'),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const getProfile = () => ({\n  type: ACTION_TYPES.GET_PROFILE,\n  payload: {\n    data: {\n      'display-ribbon-on-profiles': 'dev',\n      activeProfiles: ['swagger', 'dev'],\n    },\n  },\n});\n","import axios from 'axios';\nimport { Storage } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { setLocale } from 'app/shared/reducers/locale';\n\nexport const ACTION_TYPES = {\n  LOGIN: 'authentication/LOGIN',\n  GET_SESSION: 'authentication/GET_SESSION',\n  LOGOUT: 'authentication/LOGOUT',\n  CLEAR_AUTH: 'authentication/CLEAR_AUTH',\n  ERROR_MESSAGE: 'authentication/ERROR_MESSAGE',\n};\n\nconst AUTH_TOKEN_KEY = 'jhi-authenticationToken';\n\nconst initialState = {\n  loading: false,\n  isAuthenticated: false,\n  loginSuccess: false,\n  loginError: false, // Errors returned from server side\n  showModalLogin: false,\n  account: {} as any,\n  errorMessage: (null as unknown) as string, // Errors returned from server side\n  redirectMessage: (null as unknown) as string,\n  sessionHasBeenFetched: false,\n  idToken: (null as unknown) as string,\n  logoutUrl: (null as unknown) as string,\n};\n\nexport type AuthenticationState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: AuthenticationState = initialState, action): AuthenticationState => {\n  if (action.type === SUCCESS(ACTION_TYPES.LOGIN)) {\n    const success = action.payload.data.data.queryUser.length > 0 ? true : false;\n    if (success) {\n      const accountObj = action.payload.data.data.queryUser[0];\n      accountObj.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n      accountObj.activated = true;\n\n      return {\n        ...state,\n        loading: false,\n        loginError: false,\n        showModalLogin: false,\n        loginSuccess: true,\n        isAuthenticated: true,\n        sessionHasBeenFetched: true,\n        account: accountObj,\n      };\n    } else {\n      return {\n        ...initialState,\n        errorMessage: 'Access denied. You do not have permission to access',\n        showModalLogin: true,\n        loginError: true,\n        isAuthenticated: false,\n        sessionHasBeenFetched: true,\n      };\n    }\n  }\n\n  if (action.type === SUCCESS(ACTION_TYPES.GET_SESSION)) {\n    const success = action.payload.data.data.getUser ? true : false;\n    if (success) {\n      const accountObj = action.payload.data.data.getUser;\n      accountObj.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n      accountObj.activated = true;\n      const isAuthenticated = true;\n\n      return {\n        ...state,\n        isAuthenticated,\n        loading: false,\n        sessionHasBeenFetched: true,\n        account: accountObj,\n      };\n    } else {\n      return {\n        ...state,\n        loading: false,\n        isAuthenticated: false,\n        sessionHasBeenFetched: true,\n        showModalLogin: true,\n        errorMessage: 'Access denied. You do not have permission to access',\n      };\n    }\n  }\n\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.LOGIN):\n    case REQUEST(ACTION_TYPES.GET_SESSION):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.LOGIN):\n      return {\n        ...initialState,\n        errorMessage: action.payload,\n        showModalLogin: true,\n        loginError: true,\n      };\n    // case FAILURE(ACTION_TYPES.GET_SESSION):\n    //   return {\n    //     ...state,\n    //     loading: false,\n    //     isAuthenticated: false,\n    //     sessionHasBeenFetched: true,\n    //     showModalLogin: true,\n    //     errorMessage: action.payload,\n    //   };\n    // case SUCCESS(ACTION_TYPES.LOGIN):\n    //   return {\n    //     ...state,\n    //     loading: false,\n    //     loginError: false,\n    //     showModalLogin: false,\n    //     loginSuccess: true,\n    //   };\n    case ACTION_TYPES.LOGOUT:\n      return {\n        ...initialState,\n        showModalLogin: true,\n      };\n    // case SUCCESS(ACTION_TYPES.GET_SESSION): {\n    //   const isAuthenticated = action.payload && action.payload.data && action.payload.data.activated;\n    //   return {\n    //     ...state,\n    //     isAuthenticated,\n    //     loading: false,\n    //     sessionHasBeenFetched: true,\n    //     account: action.payload.data,\n    //   };\n    // }\n    case ACTION_TYPES.ERROR_MESSAGE:\n      return {\n        ...initialState,\n        showModalLogin: true,\n        redirectMessage: action.message,\n      };\n    case ACTION_TYPES.CLEAR_AUTH:\n      return {\n        ...state,\n        loading: false,\n        showModalLogin: true,\n        isAuthenticated: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const displayAuthError = message => ({ type: ACTION_TYPES.ERROR_MESSAGE, message });\n\nconst setlangKey: () => void = () => async (dispatch, getState) => {\n  const { account } = getState().authentication;\n  if (account && account.langKey) {\n    const langKey = Storage.session.get('locale', account.langKey);\n    await dispatch(setLocale(langKey));\n  }\n};\n\nexport const getSession: () => void = () => async (dispatch, getState) => {\n  const body = {\n    query: `query {getUser(login: \"${getState().authentication.account.login}\") {\n        login\n        email\n        langKey\n        firstName\n        lastName\n      }\n    }`,\n  };\n\n  const options = {\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Auth-Token':\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjJjYjJiYyIsImV4cCI6MTYyODkzODQ1MiwiaXNzIjoicy9hcGkifQ.g8bPCjN1PFb9pAPydPrrVKfPeMTWtqfeXpjGqmVs-2c',\n    },\n  };\n\n  await dispatch({\n    type: ACTION_TYPES.GET_SESSION,\n    payload: axios.post('graphql', body, options),\n  });\n\n  await dispatch(setlangKey());\n  // const { account } = getState().authentication;\n  // if (account && account.langKey) {\n  //   const langKey = Storage.session.get('locale', account.langKey);\n  //   await dispatch(setLocale(langKey));\n  // }\n};\n\nexport const login: (username: string, password: string, rememberMe?: boolean) => void = (username, password, rememberMe = false) => async (\n  dispatch,\n  getState\n) => {\n  const body = {\n    query: `query { queryUser(filter: {login: {eq: \"${username}\"}, password: {eq: \"${password}\"}}) {\n        login\n        email\n        langKey\n        firstName     \n        lastName\n      }\n    }`,\n  };\n\n  const options = {\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Auth-Token':\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJzL3Byb3h5IiwiZHVpZCI6IjB4MjJjYjJiYyIsImV4cCI6MTYyODkzODQ1MiwiaXNzIjoicy9hcGkifQ.g8bPCjN1PFb9pAPydPrrVKfPeMTWtqfeXpjGqmVs-2c',\n    },\n  };\n\n  const result = await dispatch({\n    type: ACTION_TYPES.LOGIN,\n    payload: axios.post('graphql', body, options),\n  });\n  const bearerToken = 'Bearer result.value.headers.authorization';\n  // if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {\n  const jwt = bearerToken.slice(7, bearerToken.length);\n  if (rememberMe) {\n    Storage.local.set(AUTH_TOKEN_KEY, jwt);\n  } else {\n    Storage.session.set(AUTH_TOKEN_KEY, jwt);\n  }\n  // }\n  // await dispatch(getSession());\n  await dispatch(setlangKey());\n};\n\nexport const clearAuthToken = () => {\n  if (Storage.local.get(AUTH_TOKEN_KEY)) {\n    Storage.local.remove(AUTH_TOKEN_KEY);\n  }\n  if (Storage.session.get(AUTH_TOKEN_KEY)) {\n    Storage.session.remove(AUTH_TOKEN_KEY);\n  }\n};\n\nexport const logout: () => void = () => dispatch => {\n  clearAuthToken();\n  dispatch({\n    type: ACTION_TYPES.LOGOUT,\n  });\n};\n\nexport const clearAuthentication = messageKey => (dispatch, getState) => {\n  clearAuthToken();\n  dispatch(displayAuthError(messageKey));\n  dispatch({\n    type: ACTION_TYPES.CLEAR_AUTH,\n  });\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AAMA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AC5GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AAMA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;AASA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}